diff --git a/src/ctypes-foreign-base/dl_stubs.c.unix b/src/ctypes-foreign-base/dl_stubs.c.unix
index 1ca2d0e..4f88e9a 100644
--- a/src/ctypes-foreign-base/dl_stubs.c.unix
+++ b/src/ctypes-foreign-base/dl_stubs.c.unix
@@ -6,7 +6,12 @@
  */
 
 #define _GNU_SOURCE
-#include <dlfcn.h>
+
+#define RTLD_LAZY	0x00001	/* Lazy function call binding.  */
+#define RTLD_NOW	0x00002	/* Immediate function call binding.  */
+#define RTLD_GLOBAL	0x00100
+#define RTLD_LOCAL	0
+#define RTLD_DEFAULT	0
 
 #include <caml/mlvalues.h>
 #include <caml/memory.h>
@@ -77,7 +82,8 @@ value ctypes_dlopen(value filename, value flag)
   char *cfilename = filename == Val_none ? NULL : String_val(Some_val(filename));
   int cflag = Int_val(flag);
 
-  void *handle = dlopen(cfilename, cflag);
+  failwith("ctypes_dlopen: not implemented");
+  void *handle = 0;
   CAMLreturn (handle != NULL ? Val_some((value)handle) : Val_none);
 }
 
@@ -91,7 +97,8 @@ value ctypes_dlsym(value handle_option, value symbol)
     : (void *)Some_val(handle_option);
 
   char *s = String_val(symbol);
-  void *result = dlsym(handle, s);
+  failwith("ctypes_dlsym: not implemented");
+  void *result = 0;
   CAMLreturn(result == NULL
              ? Val_none
              : Val_some(caml_copy_nativeint((intptr_t)result)));
@@ -101,13 +108,16 @@ value ctypes_dlsym(value handle_option, value symbol)
 /* ctypes_dlclose : handle:library -> int */
 value ctypes_dlclose(value handle)
 {
-  return Val_long(dlclose((void *)handle));
+  failwith("ctypes_dlclose: not implemented");
+  return Val_long(0);
 }
 
 /* ctypes_dlerror : unit -> string option */
 value ctypes_dlerror(value unit)
 {
   CAMLparam1(unit);
-  const char *error = dlerror();
+  failwith("ctypes_dlerror: not implemented");
+  
+  const char *error = 0;
   CAMLreturn (error != NULL ? Val_some(caml_copy_string(error)) : Val_none);
 }
